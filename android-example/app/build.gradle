apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply from: "./dotenv.gradle"


android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "net.akaame.myapplication"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    sourceSets {
        main {
            jni.srcDirs += []
            jniLibs.srcDirs += ['libs']
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        def buildType = variant.buildType.name // Sets the current build type

        println("\n============================== buildType : ${buildType} ==============================\n")

        // ANCHOR:cargo
        def rustBasePath = ".."
        def archTriplets = [
                'armeabi-v7a': 'armv7-linux-androideabi',
                'arm64-v8a'  : 'aarch64-linux-android',
                'x86_64'     : 'x86_64-linux-android',
        ]
        def libName = "mobcore"

        buildConfigField("String", "RUST_LIB_NAME", "\"${libName}\"")

        archTriplets.each { arch, target ->
            // execute cargo metadata and get path to target directory
            tasks.create(name: "cargo-output-dir-${arch}-${buildType}", description: "Get cargo metadata") {
                new ByteArrayOutputStream().withStream { os ->
                    exec {
                        commandLine 'cargo', 'metadata', '--format-version', '1'
                        workingDir rustBasePath
                        standardOutput = os
                    }
                    def outputAsString = os.toString()
                    def json = new groovy.json.JsonSlurper().parseText(outputAsString)

                    logger.info("cargo target directory: ${json.target_directory}")
                    project.ext.cargo_target_directory = json.target_directory
                    project.ext.target_jniLibs_directory = project.android.sourceSets[buildType].jniLibs.srcDirs[0]
                }
            }
            // Build with cargo
            tasks.create(name: "cargo-build-${arch}-${buildType}", type: Exec, description: "Building core for ${arch}", dependsOn: "cargo-output-dir-${arch}-${buildType}") {

                doFirst { println("\n============================== Start Compile Native Lib ==============================\n") }

                workingDir rustBasePath

                // Hook up `libName`
                environment("RUSTFLAGS", "-C link-arg=-o -C link-arg=${project.ext.cargo_target_directory}/${target}/${buildType}/lib${libName}.so")

                if (buildType.equalsIgnoreCase("release")) {
                    commandLine 'cargo', 'build', "--color=always", "--target=${target}", '--release'
                } else {
                    commandLine 'cargo', 'build', "--color=always", "--target=${target}"
                }

                doLast { println("\n============================== Finish Compile Native Lib ==============================\n") }
            }
            // Sync shared native dependencies
            tasks.create(name: "sync-rust-deps-${arch}-${buildType}", type: Sync, dependsOn: "cargo-build-${arch}-${buildType}") {
                from "${rustBasePath}/src/libs/${arch}"
                include "*.so"
                into "src/main/jniLibs/${arch}"
            }
            // Copy build libs into this app's libs directory
            tasks.create(name: "rust-deploy-${arch}-${buildType}", type: Copy, dependsOn: "sync-rust-deps-${arch}-${buildType}", description: "Copy rust libs for (${arch}) to jniLibs") {
                from "${project.ext.cargo_target_directory}/${target}/${buildType}"
                include "*.so"
                into "${project.ext.target_jniLibs_directory}/${arch}"
            }

            // Hook up tasks to execute before building java
            tasks.withType(JavaCompile) {
                compileTask -> compileTask.dependsOn "rust-deploy-${arch}-${buildType}"
            }
            preBuildProvider.get().dependsOn "rust-deploy-${arch}-${buildType}"

            // Hook up clean tasks
            tasks.create(name: "clean-${arch}-${buildType}", type: Delete, description: "Deleting built libs for ${arch}", dependsOn: "cargo-output-dir-${arch}-${buildType}") {
                delete fileTree("${project.ext.cargo_target_directory}/${target}/${buildType}") {
                    include '*.so'
                }
                delete fileTree("${project.ext.target_jniLibs_directory}/${arch}") {
                    include '*.so'
                }
            }
            clean.dependsOn "clean-${arch}-${buildType}"
        }
        // ANCHOR_END:cargo
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'



    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.2"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:1.2.2"

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.0.0'

    implementation 'com.google.android.material:material:1.0.0'

    implementation "io.reactivex.rxjava2:rxandroid:+"
    implementation 'io.reactivex:rxkotlin:1.0.0'

    implementation 'com.jakewharton.rx2:replaying-share:2.1.1'
    implementation "com.jakewharton.rxbinding2:rxbinding:2.2.0"
    implementation "com.f2prateek.rx.preferences2:rx-preferences:2.0.0"
}
