use crate::Config;
use crate::Session;
use crate::MyEnum;
use crate::Interface;
use crate::create_interface;
use crate::TestMethodNotMethod;
use crate::method_not_method;
use crate::Foo;
use crate::Boo;
use crate::create_boo;
use crate::TestPathAndResult;
use crate::Moo;
use crate::EnumObserver;
use crate::Observable;
use crate::OnEvent;

use crate::BuildList;
use crate::StringHolder;
use crate::BooleanHolder;


//use jni_sys::*;
use crate::android_c_headers::*;


use std::{
    cell::{Ref, RefCell, RefMut},
    path::{Path, PathBuf},
    rc::Rc,
    sync::{
        atomic::{AtomicBool, Ordering},
        Arc, Mutex, MutexGuard,
    },
    time::{Duration, SystemTime},
};
use chrono::{DateTime, Utc};




// ANCHOR: api


foreign_class!(class BooleanHolder {
    self_type BooleanHolder;
    constructor BooleanHolder::new() -> BooleanHolder;
    fn BooleanHolder::set(&mut self, v: bool);
});

foreign_class!(class StringHolder {
    self_type StringHolder;
    constructor StringHolder::new() -> StringHolder;
    fn StringHolder::set(&mut self, v: String);
});

/*
foreign_callback!(callback BuildList {
    self_type BuildList;
    hasNext = BuildList::hasNext(&self) -> BooleanHolder;
    next = BuildList::next(&self) -> StringHolder;
});
*/

foreign_class!(class Config {
    self_type Config;
    constructor Config::new(name: String) -> Config;
});


foreign_class!(class Session {
    self_type Session;
    constructor Session::new(cfg: Config) -> Session;
    fn Session::add_and1(&self, val: i32) -> i32;
    fn Session::greet(to: &str) -> String;
    fn Session::f(&self, _: i32, _: i32) -> i32;  alias calcF;
    //fn Session::inputList(&self, list: Box<BuildList>);
});


foreign_enum!(
    enum MyEnum {
        ITEM1 = MyEnum::Item1,
        ITEM2 = MyEnum::Item2,
        ITEM3 = MyEnum::Item3,
    }
);

foreign_class!(class Interface {
    self_type Interface;
    constructor create_interface() -> Box<Box<Interface>>;
    fn Interface::f(&self, _: i32) -> i32;
    fn Interface::set(&mut self, x: i32);
});


foreign_class!(class TestMethodNotMethod {
    self_type TestMethodNotMethod;
    constructor TestMethodNotMethod::new() -> TestMethodNotMethod;
    fn method_not_method(&self);
});

foreign_class!(class TestFnInline {
    fn int_to_str(a: i32) -> String {
        format!("{}", a)
    }
});

foreign_class!(
/// Class comment description for Foo.
#[derive(Clone)]
class Foo {
    self_type Foo;
    /// some text about the new function
    ///
    /// ```
    /// some markdown example in the text
    /// ```
    ///
    /// @param val - some number
    /// @param name - more information
    constructor Foo::new(val: i32, name: &str) -> Foo;
    //ANCHOR_END: doc_comments_usage
    //ANCHOR: alias_usage
    fn Foo::f(&self, _: i32, _: i32) -> i32;  alias calcF;
    //ANCHOR_END: alias_usage
    fn Foo::f_double(&self, _: f64, _: f64) -> f64;
    fn Foo::name(&self) -> &str; alias getName;
    fn fHypot(a: f64, b: f64) -> f64 {
        a.hypot(b)
    }
    fn now() -> SystemTime {
        SystemTime::now()
    }
    fn chrono_now() -> DateTime<Utc> {
        Utc::now()
    }
    fn chrono_now_opt(flag: bool) -> Option<DateTime<Utc>> {
        if flag {
            Some(Utc::now())
        } else {
            None
        }
    }
});


foreign_class!(class Boo {
    self_type Boo;
    constructor create_boo() -> Rc<RefCell<Boo>>;
    fn Boo::test(&self, _: bool) -> f32;
    fn Boo::set_a(&mut self, _: i32); alias setA;
    fn Boo::get_a(&self) -> i32; alias getA;

    fn test_u8(v: u8) -> u8 {
        v + 1
    }
    fn test_i8(v: i8) -> i8 {
        v + 1
    }
    fn test_u16(v: u16) -> u16 {
        v + 1
    }
    fn test_i16(v: i16) -> i16 {
        v + 1
    }
    fn test_i32(v: i32) -> i32 {
        v + 1
    }
    fn test_u32(v: u32) -> u32 {
        v + 1
    }
    fn test_u64(v: u64) -> u64 {
        v + 1
    }
    fn test_i64(v: i64) -> i64 {
        v + 1
    }
    fn test_f32(v: f32) -> f32 {
        v + 1.
    }
    fn test_f64(v: f64) -> f64 {
        v + 1.
    }

    fn r_test_u8(v: u8) -> Result<u8, &'static str> {
        Ok(v + 1)
    }
    fn r_test_i8(v: i8) -> Result<i8, &'static str> {
        Ok(v + 1)
    }
    fn r_test_u16(v: u16) -> Result<u16, &'static str> {
        Ok(v + 1)
    }
    fn r_test_i16(v: i16) -> Result<i16, &'static str> {
        Ok(v + 1)
    }
    fn r_test_i32(v: i32) -> Result<i32, &'static str> {
        Ok(v + 1)
    }
    fn r_test_u32(v: u32) -> Result<u32, &'static str> {
        Ok(v + 1)
    }
    fn r_test_u64(v: u64) -> Result<u64, &'static str> {
        Ok(v + 1)
    }
    fn r_test_i64(v: i64) -> Result<i64, &'static str> {
        Ok(v + 1)
    }
    fn r_test_f32(v: f32) -> Result<f32, &'static str> {
        Ok(v + 1.)
    }
    fn r_test_f64(v: f64) -> Result<f64, &'static str> {
        Ok(v + 1.)
    }
});

foreign_class!(class TestPathAndResult {
    self_type TestPathAndResult;
    constructor TestPathAndResult::empty() -> Result<TestPathAndResult, String>;
    constructor TestPathAndResult::new(path: &Path) -> Result<TestPathAndResult, String>;
    fn TestPathAndResult::get_path(&self) -> String; alias getPath;
    fn TestPathAndResult::get_boo(&self) -> Rc<RefCell<Boo>>; alias getBoo;
    foreign_code "    public int javaFunc() { return 17; }\n";
    foreign_code r#"
    public Boo[] testHandArrayReturn() { return do_testHandArrayReturn(this.mNativeObj); }
    private static native Boo[] do_testHandArrayReturn(long me);
"#;
    fn TestPathAndResult::get_foo_list(&self) -> Vec<Foo>;
    fn TestPathAndResult::get_result_foo_list(generate_err: bool) -> Result<Vec<Foo>, String>;
});



foreign_callback!(callback EnumObserver {
    self_type EnumObserver;
    onStateUpdate = EnumObserver::on_state_changed(&self, item: MyEnum, is_ok: bool);
});

foreign_class!(class TestEnumClass {
    self_type Moo;
    constructor Moo::default() -> Moo;
    fn Moo::f1(&mut self, v: MyEnum) -> i32;
    fn Moo::next_enum(v: MyEnum) -> MyEnum;
    fn call_cb(cb: Box<EnumObserver>) {
        let mut state = false;
        for e in &[MyEnum::Item1, MyEnum::Item2, MyEnum::Item3] {
            cb.on_state_changed(*e, state);
            state = !state;
        }
    }
});


foreign_callback!(callback MyObserver {
    self_type OnEvent;
    onStateChanged = OnEvent::something_change(&self, x: i32, s: &str);
});

foreign_class!(class Observable {
    self_type Observable;
    constructor Observable::default() -> Observable;
    fn Observable::subscribe(&mut self, _: Box<OnEvent>);
    fn Observable::change(&self, _: i32, _: &str);
});

// ANCHOR_END: api
